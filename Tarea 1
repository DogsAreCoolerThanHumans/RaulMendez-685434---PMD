#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct Profesor
{
  char nombre[15];
  float calificacion;
};

typedef struct Profesor profesor; //sinónimo

//Prototipos:
void readArray (profesor arr[], int n) 
{
  profesor * parr = arr; 
  for (int i=0; i<n; i++)
    {
      scanf("%s", (parr+i)->nombre);
      scanf ("%f", &(parr+i)->calificacion);
    }
};

void mergeArrays(profesor arr1[], int n1, profesor arr2[], int n2, profesor arrF[])
{
    for(int i=0; i<n1; i++)
    {
        arrF[i] = arr1[i];
    }
    
    for(int k=0; k<n2; k++)
    {
        arrF[k+n1] = arr2[k];
    }
}

void sortArray (profesor parr[], int n) // ordena arrF (salida de merge)
{
    profesor * arr = parr;
    profesor aux; 
    for(int i=0; i<n; i++)
    {
        for(int k=0; k<n-1; k++)
        {
            if((arr+k)->calificacion<(arr+k+1)->calificacion)
            {
                aux.calificacion=(arr+k)->calificacion;
                strcpy(aux.nombre, (arr+k)->nombre);
                
                (arr+k)->calificacion=(arr+k+1)->calificacion;
                strcpy((arr+k)->nombre, (arr+k+1)->nombre);
                
                (arr+k+1)->calificacion=aux.calificacion;
                strcpy((arr+k+1)->nombre, aux.nombre);
            }
        }
    }
};

void printArray (profesor arr[], int n)
{
     for(int i=0; i<n; i++)
     {
     printf("%s\t", arr[i].nombre);
     printf("%.1f\n", arr[i].calificacion);
     }
};

void main ()
{
  profesor arr1[20];		//Primer arreglo (de estructuras tipo prof)
  profesor arr2[20];		//Segundo arreglo
  profesor arrF[40];		//Arreglo final, con elementos fusionados y ordenados
  int n1, n2;           	//Longitud de los arreglos

scanf("%d", &n1);
    readArray(arr1, n1);	//leer el primer arreglo
scanf("%d", &n2);
    readArray (arr2, n2);	//leer el segundo arreglo 
  
  int nF=n1+n2; //longitud final
  
mergeArrays(arr1, n1, arr2, n2, arrF); //Fusionar los dos arreglos en un tercer arreglo - arrF

sortArray(arrF, nF);	//Ordenar los elementos del tercer arreglo arrF, recuerde que pueden 
  //existir profesores repetidos

printArray(arrF, nF); //Imprimir arreglo final (arrF)

  return 0;
}


//---------------------------------------------------------------------------------------------
/*
profesor p;
profesor * ap = p; 
ap->calificacion=7;
scanf("%f", &ap->calificacion); //& porque es variable, no lleva si fuese array

int v[]={1,2,3,4};
int *p=v; //no lleva & porque nombre del array representa dirección inicial 
*p++:
*p=*p+1;

p++
*/
